---
import ProgressBar from "../components/ProgressBar.astro";
import FloatingButton from "../components/FloatingButton.astro";
import Footer from "../components/Footer.astro";

import data from "../assets/formatted_simpsons_data.json";
import rawdata from "../assets/simpsons_data.json";

import { Image } from "astro:assets";
import jesus from "../assets/jesusNoBg.gif";

for (const ep of data.seasons) {
	ep["seen"] = true;
}
---

<html lang="en" class="bg-darkBlue">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<link
			rel="stylesheet"
			href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0"
		/>

		<title>Simpsons checklist</title>
	</head>

	<body class="bg-gradient-to-b from-[#024975] to-[#24cbeb]">
		<dialog
			id="randommodal"
			class="bg-yellow-500 text-sm max-w-lg border p-8 lg:p-14 border-black/80 border-1 mx-3 lg:m-auto"
		>
			<h3 class="font-bold text-lg" id="modaltitle">Title</h3>
			<p id="modalepisode">Season</p>
			<p class="py-4" id="modaldescription">Description</p>
			<div class="mt-4 flex justify-end">
				<button
					id="modalbutton"
					class="bg-yellow w-auto px-3 h-10 rounded-md border-solid border m-1 border-black/80"
					>Next random</button
				>
				<form method="dialog">
					<!-- if there is a button in form, it will close the modal -->
					<button
						class="bg-transparent hidden w-auto px-3 h-10 rounded-md border-solid border m-1 border-black/80"
						>Close</button
					>
				</form>
			</div>
		</dialog>

		<div class="p-10 lg:20 w-screen">
			<div class="flex">
				<div
					class="mb-10 flex-col flex items-center text-center lg:text-left lg:items-start lg:flex-row"
				>
					<div class="lg:mr-2">
						<Image src={jesus} alt="Cheesus" class="max-w-16" />
					</div>
					<div>
						<h1
							class="text-6xl text-yellow lg:text-7xl mb-6 lg:mb-2 font-serif [text-shadow:_0_4px_0px_rgba(0,0,0,1)]"
						>
							Simpson checklist
						</h1>
						<h5 class="uppercase text-lg font-second text-white">
							Take note of The Simpsons episodes you've watched
						</h5>
					</div>
				</div>
			</div>

			<div
				id="mainlist"
				data-seasons={JSON.stringify(data.seasons)}
				class="justify-start"
			>
				<div class="flex flex-wrap gap-4 justify-center">
					{
						data.seasons.map((season, idx) => (
							<div id="" class="rounded-md pb-2 ">
								<button  id=`hideButton${idx}` class="hideButtons text-sm bg-orange px-2 py-1 w-56 rounded-t-md justify-between  flex">
									<h3 class=" font-serif bold my-auto  ">
										Season: {season[0].season}
									</h3>
									<div class="flex gap-x-2">
										<p class="my-auto">0/{season.length}</p>
										<p class="md:hidden" >
											close
										</p>
									</div>
								</button>
								<div class="block bg-yellow rounded-b-md" data-status="open" id=`episodesDiv${idx}`>
									{season.map((episode) => (
										<div class="flex flex-col gap-y-2 py-2 max-w-56 px-2">
											<div class=" flex flex-row justify-between">
												<div class="mr-2">
													<h5 class=" my-auto text-xs font-bold text-wrap leading-[1.1em]">
														<span class=" font-normal">{episode.episode} </span>{episode.title}
													</h5>
													<p class="text-[8pt] leading-[1em] max-w-48">
														{episode.description}
													</p>
												</div>
												<input
													class="my-auto"
													type="checkbox"
													id="horns"
													name="horns"
												/>
											</div>
										</div>
									))}
								</div>
							</div>
						))
					}
				</div>
			// 	<!-- {
			// 		data.seasons.map((season) => (
			// 			<>
			// 				<div class="mt-16">
			// 					<h3 class=" font-bold ">
			// 						Season {season[0].season}
			// 					</h3>
			// 				</div>
			// 				<div class="mb-6 mt-2 flex-wrap flex justify-start text-sm ">
			// 					{season.map((episode) => (
			// 						<div  id=`${episode.season}x${episode.episode}` class="has-tooltip flex justify-center">
			// 							<span class="tooltip rounded shadow-lg p-1 bg-gray-800 text-white px-3 text-xs -translate-y-full max-w-28 -mt-1 text-center">
			// 								<span class=" font-bold">
			// 									{episode.title} <br />
			// 								</span>
			// 								{episode.description}
			// 							</span>

			// 							<button class="bg-yellow-400 w-10 h-10 rounded-sm border-solid border m-1 border-gray-900 hover:bg-yellow-500">
			// 								{episode.episode}
			// 							</button>
			// 						</div>
			// 					))}
			// 				</div>
			// 			</>
			// 		))
			// 	}
			// </div>  -->
				// <FloatingButton episodes={rawdata.episodes} />
				<Footer />
			</div>
		</div>
	</body>

	<style is:global>
		@font-face {
			font-family: "SimpsonsFont";
			src: url("/fonts/simpsonsfont.woff") format("woff");
			font-weight: normal;
			font-style: normal;
			font-display: swap;
		}
		@font-face {
			font-family: "SimpsonsSecondaryFont";
			src: url("/fonts/akbar.ttf") format("truetype");
			font-weight: normal;
			font-style: normal;
			font-display: swap;
		}
		.tooltip {
			@apply invisible absolute;
		}

		.has-tooltip:hover .tooltip {
			@apply visible z-50;
		}

		dialog::backdrop {
			background-color: black;
			opacity: 0.55;
		}
	</style>

	<script>
		let db = localStorage.getItem("simpsons-db");
		if (db) {
			console.log("Database Found");
			console.log(JSON.parse(db));
		} else {
			console.log("Database Not Found");
			localStorage.setItem(
				"simpsons-db",
				document.getElementById("mainlist").dataset.seasons,
			);
		}
		// setButtonsCallbacks();
		// updateButtons();
		// updateProgressBar();

		const hideButtons = document.getElementsByClassName("hideButtons");

		for (let index = 0; index < hideButtons.length; index++) {
			const element = hideButtons.namedItem(`hideButton${index}`);
			element.addEventListener("click", (ev) => {
				const episodesDiv = document.getElementById(`episodesDiv${index}`);
				if (episodesDiv.dataset["status"] == "open") {
					episodesDiv.classList.add( "h-2", "overflow-hidden");
					episodesDiv.classList.remove( "h-max");
					episodesDiv.dataset["status"] = "closed"
					console.log("closed")
				}
				else if (episodesDiv.dataset["status"] == "closed") {
					episodesDiv.classList.add( "h-max");
					episodesDiv.classList.remove("h-2", "overflow-hidden");
					episodesDiv.dataset["status"] = "open"
					
					console.log("open")
				}

			});
		}

		function updateProgressBar() {
			let db = localStorage.getItem("simpsons-db");
			if (!db) throw Error("Error: No database found.");
			let dbjson = JSON.parse(db) as Array<any>;
			let progressbar = document.getElementById("progressbar");
			let progressbarlabel = document.getElementById("progressbar-label");
			const allEpisodes = dbjson.flat();
			const perc =
				(allEpisodes.filter((e) => e.seen == true).length /
					allEpisodes.length) *
				100;
			progressbarlabel.innerHTML = `${perc.toPrecision(3)}%`;
			progressbar.style.width = `${perc.toPrecision(1)}%`;
		}

		// function setButtonsCallbacks() {
		// 	let db = localStorage.getItem("simpsons-db");
		// 	if (!db) throw Error("Error: No database found.");
		// 	let dbjson = JSON.parse(db);
		// 	dbjson.forEach((season) => {
		// 		season.forEach((episode) => {
		// 			let episodediv = document.getElementById(
		// 				`${episode.season}x${episode.episode}`,
		// 			);
		// 			let episodebutton = episodediv.querySelector("button");
		// 			episodebutton.addEventListener("click", () => {
		// 				dbjson[episode.season - 1][episode.episode - 1].seen =
		// 					!dbjson[episode.season - 1][episode.episode - 1]
		// 						.seen;
		// 				db = JSON.stringify(dbjson);
		// 				localStorage.setItem("simpsons-db", db);

		// 				updateButtons();
		// 				updateProgressBar();
		// 			});
		// 		});
		// 	});
		// }

		// function updateButtons() {
		// 	let db = localStorage.getItem("simpsons-db");
		// 	if (!db) throw Error("Error: No database found.");
		// 	let dbjson = JSON.parse(db);
		// 	dbjson.forEach((season) => {
		// 		season.forEach((episode) => {
		// 			let episodediv = document.getElementById(
		// 				`${episode.season}x${episode.episode}`,
		// 			);
		// 			let episodebutton = episodediv.querySelector("button");
		// 			if (episode.seen) {
		// 				episodebutton.classList.remove("bg-yellow-400");
		// 				episodebutton.classList.add("bg-green-600");
		// 			} else {
		// 				episodebutton.classList.add("bg-yellow-400");
		// 				episodebutton.classList.remove("bg-green-600");
		// 			}
		// 		});
		// 	});
		// }
	</script>
</html>
